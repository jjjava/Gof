Chapter II
	In this chapter we will see the frist design pattern Singleton.
	Singleton:
	
	In software engineering, the singleton pattern is a design pattern that restricts the instantiation of a class to one object. 
	This is useful when exactly one object is needed to coordinate actions across the system. 
	The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the 
	instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton.
	
	Purpose: Allow the creation of a single instance of a class and provide a way to retrieve it.
		
	Singleton Eager example 1:
	
			public class EagerSingleton {

				private static final EagerSingleton INSTANCE = new EagerSingleton();

				private EagerSingleton() {
				}

				public static EagerSingleton getInstance() {
					return INSTANCE;
				}
			}
	description ...
	
	Singleton Eager example 2:
	
			public class EagerSingleton2 {

				private static class EagerSingleton2Holder {

					private static final EagerSingleton2 INSTANCE = new EagerSingleton2();
				}

				private EagerSingleton2() {
				}

				public static EagerSingleton2 getInstance() {
					return EagerSingleton2Holder.INSTANCE;
				}
			}
	description ...
	